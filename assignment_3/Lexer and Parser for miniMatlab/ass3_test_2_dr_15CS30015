type-specifier ===> void
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
type-specifier ===> Matrix
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-declaration
type-specifier ===> Matrix
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
parameter-type-list ===> parameter-list
direct-declarator ===> direct-declarator (parameter-type-list)
declarator ===> pointer-opt direct_declarator
declaration-list-opt ===> EMPTY_STRING
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
initializer ===> assignment-expression
declarator = initializer
init-declarator-list ===> init-declarator-list
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
initializer ===> assignment-expression
declarator = initializer
init-declarator-list ===> init-declarator-list , init-declarator
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list , init-declarator
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list , init-declarator
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> relational-expression < shift-expression
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> relational-expression < shift-expression
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> equality-expression != relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> equality-expression != relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> logical-AND-expression && inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
constant ===> CONSTANT-INTEGER
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> additive-expression - multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> equality-expression == relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
selection-statement ===> if ( expression ) statement
statement ===> selection-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
selection-statement ===> if ( expression ) statement
statement ===> selection-statement
block-item ===> statement
block-item-list ===> block-item
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
iteration-statement ===> for ( expression-opt ; expression-opt ; expression-opt ) statement
statement ===> iteration-statement
block-item ===> statement
block-item-list ===> block-item
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
iteration-statement ===> for ( expression-opt ; expression-opt ; expression-opt ) statement
statement ===> iteration-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
function-declaration ===> declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration ===> function-declaration
translation-unit ===> external-declaration
type-specifier ===> float
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
type-specifier ===> Matrix
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
parameter-type-list ===> parameter-list
direct-declarator ===> direct-declarator (parameter-type-list)
declarator ===> pointer-opt direct_declarator
declaration-list-opt ===> EMPTY_STRING
type-specifier ===> float
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
constant ===> CONSTANT-FLOATING
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
initializer ===> assignment-expression
declarator = initializer
init-declarator-list ===> init-declarator-list
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
constant ===> CONSTANT-INTEGER
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> equality-expression == relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
jump-statement ===> return expression-opt ; 
statement ===> jump-statement
selection-statement ===> if ( expression ) statement
statement ===> selection-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
type-specifier ===> Matrix
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression-opt ===> assignment-expression
direct-declarator ===> direct-declarator [assignment-expression-opt]
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression-opt ===> assignment-expression
direct-declarator ===> direct-declarator [assignment-expression-opt]
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item-list block-item-list
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
constant ===> CONSTANT-INTEGER
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
initializer ===> assignment-expression
declarator = initializer
init-declarator-list ===> init-declarator-list
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item-list block-item-list
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item-list block-item-list
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> relational-expression < shift-expression
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===> assignment-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===>argument-expression-list , assignment-expression
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===>argument-expression-list , assignment-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===>argument-expression-list , assignment-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===>argument-expression-list , assignment-expression
argument-expression-list-opt ===> argument-expression-list
postfix-expression ===>postfix_expression (argument-expression-list_opt)
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> += 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> multiplicative-expression * cast-expression
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===> assignment-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
constant ===> CONSTANT-INTEGER
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> additive-expression - multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===>argument-expression-list , assignment-expression
argument-expression-list-opt ===> argument-expression-list
postfix-expression ===>postfix_expression (argument-expression-list_opt)
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> multiplicative-expression * cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
unary-operator ===> - 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
unary-expression ===> unary-operator cast-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
iteration-statement ===> for ( expression-opt ; expression-opt ; expression-opt ) statement
statement ===> iteration-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
jump-statement ===> return expression-opt ; 
statement ===> jump-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
function-declaration ===> declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration ===> function-declaration
translation-unit ===> translation-unit external-declaration
type-specifier ===> void
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
type-specifier ===> Matrix
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
parameter-declaration ===> declaration-specifiers declarator
parameter-list ===> parameter-list , parameter-declaration
parameter-type-list ===> parameter-list
direct-declarator ===> direct-declarator (parameter-type-list)
declarator ===> pointer-opt direct_declarator
declaration-list-opt ===> EMPTY_STRING
type-specifier ===> int
declaration-specifiers-opt ===> EMPTY-STRING
declaration-specifiers ===> type-specifier declaration-specifiers-opt
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list
pointer-opt ===> EMPTY-STRING
direct-declarator ===>identifier 
declarator ===> pointer-opt direct_declarator
init-declarator ===> declarator 
init-declarator-list ===> init-declarator-list , init-declarator
init-declarator-list-opt ===> init-declarator-list
declaration ===> declaration-specifiers init-declarator-list-opt ; 
block-item ===> declaration
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> relational-expression < shift-expression
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
assignment-operator ===> = 
constant ===> CONSTANT-ZERO
primary-expression ===>constant 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
assignment-expression ===> unary-expression assignment-operator assignment-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> relational-expression < shift-expression
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
postfix-expression ===>postfix-expression -- 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
postfix-expression ===>postfix-expression [ expression] 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===> assignment-expression 
argument-expression-list-opt ===> argument-expression-list
postfix-expression ===>postfix_expression (argument-expression-list_opt)
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
iteration-statement ===> for ( expression-opt ; expression-opt ; expression-opt ) statement
statement ===> iteration-statement
block-item ===> statement
block-item-list ===> block-item
primary-expression ===>identifier 
postfix-expression-expression ===>primary-expression 
primary-expression ===> string-literal
postfix-expression-expression ===>primary-expression 
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
argument-expression-list ===> assignment-expression 
argument-expression-list-opt ===> argument-expression-list
postfix-expression ===>postfix_expression (argument-expression-list_opt)
unary-expression ===> postfix-expression 
cast-expression ===> unary-expression
multiplicative-expression ===> cast-expression
additive_expression ===> multiplicative-expression
shift-expression ===> additive-expression
relational-expression ===> shift-expression 
equality-expression ===> relational-expression
AND-expression ===> equality_expression
exclusive-OR-expression ===> AND-expression
inclusive-OR-expression ===> exclusive-OR-expression
logical-AND-expression ===> inclusive-OR-expression
logical-OR-expression ===> logical-AND-expression
conditional-expression ===> logical_OR_expression
assignment-expression ===> conditional-expression
expression ===> assignment-expression
expression-opt ===> expression-opt
expression-statement ===> expression-opt;
statement ===> expression-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
statement ===> compound-statement
iteration-statement ===> for ( expression-opt ; expression-opt ; expression-opt ) statement
statement ===> iteration-statement
block-item ===> statement
block-item-list ===> block-item-list block-item-list
block-item-list-opt ===> block-item-list
compound-statement ===> { block-item-list-opt }
function-declaration ===> declaration-specifiers declarator declaration-list-opt compound-statement
external-declaration ===> function-declaration
translation-unit ===> translation-unit external-declaration
