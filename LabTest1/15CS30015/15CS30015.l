%{
#include "15CS30015.h"
%}

%option nounput yylineno
%x comment

BREAK		"break"
RETURN		"return"
CASE		"case"
FLOAT		"float"
FOR			"for"
WHILE		"while"
CONTINUE	"continue"
IF			"if"
DEFAULT		"default"
INT			"int"
SWITCH		"switch"
MATRIX_KEY		"Matrix"
IDENTIFIER	[_a-zA-Z][_a-zA-Z0-9]*
ZERO_CONSTANT			"0"
DIGIT					[0-9]
NONZERO_DIGIT			[1-9]
INTEGER_CONSTANT		[1-9][0-9]*
DIGIT_SEQUENCE			[0-9]+
FRACTIONAL_CONSTANT		(({DIGIT_SEQUENCE})?\.{DIGIT_SEQUENCE})|({DIGIT_SEQUENCE}\.)
SIGN					[+-]
EXPONENT_PART			[Ee]({SIGN})?{DIGIT_SEQUENCE}
FLOATING_CONSTANT		({FRACTIONAL_CONSTANT}({EXPONENT_PART})?)|({DIGIT_SEQUENCE}{EXPONENT_PART})
S_CHAR					([^("\\")("\n")("\'")])
S_CHAR_SEQUENCE			{S_CHAR}+
STRING_LITERAL			"\""{S_CHAR_SEQUENCE}?"\""
LEFT_SQUARE_BRAC_PUNC	"["
RIGHT_SQUARE_BRAC_PUNC	"]"
LEFT_SMALL_BRAC_PUNC	"("
RIGHT_SMALL_BRAC_PUNC	")"
LEFT_CURL_BRAC_PUNC		"{"
RIGHT_CURL_BRAC_PUNC	"}"
DOT_PUNC				"."
INCREMENT_PUNC			"++"
DECREMENT_PUNC			"--"
MULT_PUNC				"*"
PLUS_PUNC				"+"
MINUS_PUNC				"-"
DIVIDE_PUNC				"/"	
NOT_PUNC				"!"
LESS_THAN_PUNC			"<"
GREATER_THAN_PUNC		">"
AND_PUNC				"&&"
OR_PUNC					"||"	
QUESTION_MARK_PUNC		"?"
COLON_PUNC				":"
SEMICOLON_PUNC			";"
EQUAL_PUNC				"="
COMMA_PUNC				","
HASTAG_PUNC				"#"
SINGLE_LINE_COMMENT		"//"[^\r\n]*[\r\n]


INTEGER_CONST			{ZERO_CONSTANT}|{INTEGER_CONSTANT}
FOR_LOOP_1				{FOR}{LEFT_SMALL_BRAC_PUNC}{IDENTIFIER}{EQUAL_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC}{IDENTIFIER}{LESS_THAN_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC}{IDENTIFIER}{INCREMENT_PUNC}{RIGHT_SMALL_BRAC_PUNC}
FOR_LOOP_2				{FOR}{LEFT_SMALL_BRAC_PUNC}{IDENTIFIER}{EQUAL_PUNC}{INTEGER_CONST}{COMMA_PUNC}{IDENTIFIER}{EQUAL_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC}{IDENTIFIER}{LESS_THAN_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC}{IDENTIFIER}{INCREMENT_PUNC}{COMMA_PUNC}{IDENTIFIER}{DECREMENT_PUNC}{RIGHT_SMALL_BRAC_PUNC}
WHILE_LOOP				{WHILE}{LEFT_SMALL_BRAC_PUNC}{IDENTIFIER}{LESS_THAN_PUNC}{INTEGER_CONSTANT}{RIGHT_SMALL_BRAC_PUNC}
DECLARATION				({IDENTIFIER}{EQUAL_PUNC}{INTEGER_CONST}{COMMA_PUNC})*({IDENTIFIER}{EQUAL_PUNC}{INTEGER_CONST})
ARRAY_ACCESS			{IDENTIFIER}{LEFT_SQUARE_BRAC_PUNC}{IDENTIFIER}{RIGHT_SQUARE_BRAC_PUNC}
IF_CONDITION			{IF}{LEFT_SMALL_BRAC_PUNC}{IDENTIFIER}{LESS_THAN_PUNC}{INTEGER_CONSTANT}{AND_PUNC}{IDENTIFIER}{LESS_THAN_PUNC}{INTEGER_CONSTANT}{RIGHT_SMALL_BRAC_PUNC}
UNARY_OP				{IDENTIFIER}{INCREMENT_PUNC}|{INCREMENT_PUNC}{IDENTIFIER}
SWITCH_NEW				{SWITCH}{LEFT_SMALL_BRAC_PUNC}{IDENTIFIER}{RIGHT_SMALL_BRAC_PUNC}
MATRIX					{LEFT_SQUARE_BRAC_PUNC}({INTEGER_CONST}{COMMA_PUNC}{INTEGER_CONST}{COMMA_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC})*{INTEGER_CONST}{COMMA_PUNC}{INTEGER_CONST}{COMMA_PUNC}{INTEGER_CONST}{RIGHT_SQUARE_BRAC_PUNC}
BINARY_OP				{IDENTIFIER}{EQUAL_PUNC}{IDENTIFIER}{PLUS_PUNC}{INTEGER_CONST}{SEMICOLON_PUNC}
WHITESPACE				[ \t\n]
%%

{BREAK}						{ return KEYWORD_BREAK; }
{RETURN}					{ return KEYWORD_RETURN; }
{CASE}						{ return KEYWORD_CASE; }
{FLOAT}						{ return KEYWORD_FLOAT; }
{FOR}						{ return KEYWORD_FOR; }
{WHILE}						{ return KEYWORD_WHILE; }
{CONTINUE}					{ return KEYWORD_CONTINUE; }
{IF}						{ return KEYWORD_IF; }
{DEFAULT}					{ return KEYWORD_DEFAULT; }
{INT}						{ return KEYWORD_INT; }
{SWITCH}					{ return KEYWORD_SWITCH; }
{MATRIX_KEY}				{ return KEYWORD_MATRIX_KEY; }

{IDENTIFIER}				{ return IDENTIFIER; }
{INTEGER_CONSTANT}			{ return INTEGER_CONSTANT; }
{FLOATING_CONSTANT}			{ return FLOATING_CONSTANT; }
{ZERO_CONSTANT}				{ return ZERO_CONSTANT; }
{STRING_LITERAL}			{ return STRING_LITERAL; }
{LEFT_SQUARE_BRAC_PUNC}		{ return LEFT_SQUARE_BRAC_PUNC; }
{RIGHT_SQUARE_BRAC_PUNC}	{ return RIGHT_SQUARE_BRAC_PUNC; }
{LEFT_SMALL_BRAC_PUNC}		{ return LEFT_SMALL_BRAC_PUNC; }
{RIGHT_SMALL_BRAC_PUNC}		{ return RIGHT_SMALL_BRAC_PUNC; }
{LEFT_CURL_BRAC_PUNC}		{ return LEFT_CURL_BRAC_PUNC; }
{RIGHT_CURL_BRAC_PUNC}		{ return RIGHT_CURL_BRAC_PUNC; }
{DOT_PUNC}					{ return DOT_PUNC; }

{INCREMENT_PUNC}			{ return INCREMENT_PUNC; }
{DECREMENT_PUNC}			{ return DECREMENT_PUNC; }
{MULT_PUNC}					{ return MULT_PUNC; }
{PLUS_PUNC}					{ return PLUS_PUNC; }
{MINUS_PUNC}				{ return MINUS_PUNC; }
{DIVIDE_PUNC}				{ return DIVIDE_PUNC; }
{NOT_PUNC}					{ return NOT_PUNC; }

{LESS_THAN_PUNC}			{ return LESS_THAN_PUNC; }
{GREATER_THAN_PUNC}			{ return GREATER_THAN_PUNC; }

{AND_PUNC}					{ return AND_PUNC; }
{OR_PUNC}					{ return OR_PUNC; }
{QUESTION_MARK_PUNC}		{ return QUESTION_MARK_PUNC; }
{COLON_PUNC}				{ return COLON_PUNC; }
{SEMICOLON_PUNC}			{ return SEMICOLON_PUNC; }
{EQUAL_PUNC}				{ return EQUAL_PUNC; }

{COMMA_PUNC}				{ return COMMA_PUNC; }
{HASTAG_PUNC}				{ return HASTAG_PUNC; }
{SINGLE_LINE_COMMENT}		{ return SINGLELINE_COMMENT; }
{FOR_LOOP_1}				{ return FOR_LOOP_1; }
{FOR_LOOP_2}				{ return FOR_LOOP_2; }
{WHILE_LOOP}				{ return WHILE_LOOP; }
{DECLARATION}				{ return DECLARATION; }
{ARRAY_ACCESS}				{ return ARRAY_ACCESS; }
{IF_CONDITION}				{ return IF_CONDITION; }
{UNARY_OP}					{ return UNARY_OP; }
{SWITCH_NEW}				{ return SWITCH_NEW; }
{MATRIX}					{ return MATRIX; }
{BINARY_OP}					{ return BINARY_OP; }
{WHITESPACE}				{ /* Ignore whitespace */ }
.							{ printf ("Unexpected character\n"); }

%%

int yywrap (void) {
	return 1;
}

